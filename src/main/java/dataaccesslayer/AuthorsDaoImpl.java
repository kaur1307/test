/*
 * File: AuthorsDaoImpl.java
 * Author: Thuvarahan Ragunathan
 * Date: 2025
 * Description: Implementation of AuthorsDao interface using JDBC
 */
package dataaccesslayer;

import java.util.List;
import transferobjects.AuthorDTO;
import java.util.ArrayList;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import transferobjects.CredentialsDTO;

/**
 * Implementation of AuthorsDao interface
 * Handles all database operations for Author entities using Singleton DataSource
 * 
 * @author Thuvarahan Ragunathan
 * @version 1.0
 */
public class AuthorsDaoImpl implements AuthorsDao {

    private CredentialsDTO creds;

    /**
     * Constructor with credentials
     * @param creds database credentials
     */
    public AuthorsDaoImpl(CredentialsDTO creds) {
        this.creds = creds;
    }

    @Override
    public List<AuthorDTO> getAllAuthors() throws SQLException {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ArrayList<AuthorDTO> authors = null;
        try {
            DataSource ds = DataSource.getInstance();
            ds.setCredentials(creds);
            con = ds.getConnection();
            pstmt = con.prepareStatement(
                    "SELECT AuthorID, FirstName, LastName FROM Authors ORDER BY AuthorID");
            rs = pstmt.executeQuery();
            authors = new ArrayList<AuthorDTO>();
            while (rs.next()) {
                AuthorDTO author = new AuthorDTO();
                author.setAuthorID(Integer.valueOf(rs.getInt("AuthorID")));
                author.setFirstName(rs.getString("FirstName"));
                author.setLastName(rs.getString("LastName"));
                authors.add(author);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw e;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
        return authors;
    }

    @Override
    public AuthorDTO getAuthorByAuthorId(Integer authorID) {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        AuthorDTO author = null;
        try {
            DataSource ds = DataSource.getInstance();
            ds.setCredentials(creds);
            con = ds.getConnection();
            pstmt = con.prepareStatement(
                    "SELECT AuthorID, FirstName, LastName FROM Authors WHERE AuthorID = ?");
            pstmt.setInt(1, authorID.intValue());
            rs = pstmt.executeQuery();
            while (rs.next()) {
                author = new AuthorDTO();
                author.setAuthorID(Integer.valueOf(rs.getInt("AuthorID")));
                author.setFirstName(rs.getString("FirstName"));
                author.setLastName(rs.getString("LastName"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
        return author;
    }

    @Override
    public void addAuthor(AuthorDTO author) {
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            DataSource ds = DataSource.getInstance();
            ds.setCredentials(creds);
            con = ds.getConnection();
            // do not insert AuthorID, it is generated by Database
            pstmt = con.prepareStatement(
                    "INSERT INTO Authors (FirstName, LastName) VALUES(?, ?)");
            pstmt.setString(1, author.getFirstName());
            pstmt.setString(2, author.getLastName());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    @Override
    public void updateAuthor(AuthorDTO author) {
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            DataSource ds = DataSource.getInstance();
            ds.setCredentials(creds);
            con = ds.getConnection();
            pstmt = con.prepareStatement(
                    "UPDATE Authors SET FirstName = ?, LastName = ? WHERE AuthorID = ?");
            pstmt.setString(1, author.getFirstName());
            pstmt.setString(2, author.getLastName());
            pstmt.setInt(3, author.getAuthorID().intValue());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    @Override
    public void deleteAuthor(AuthorDTO author) {
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            DataSource ds = DataSource.getInstance();
            ds.setCredentials(creds);
            con = ds.getConnection();
            pstmt = con.prepareStatement(
                    "DELETE FROM Authors WHERE AuthorID = ?");
            pstmt.setInt(1, author.getAuthorID().intValue());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }
}